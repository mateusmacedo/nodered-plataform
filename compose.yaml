networks:
    local:
        driver: bridge
        ipam:
            config:
                - subnet: 172.163.0.0/24

volumes:
  postgres:
      name: postgres
  cockroachdb:
      name: cockroachdb
  mongodb:
      name: mongodb
  redis:
      name: redis
  localstack:
      name: localstack
  keycloak:
      name: keycloak
  zookeeper:
      name: zookeeper
  kafka:
      name: kafka
  rabbitmq:
      name: rabbitmq
  nats:
      name: nats
  mosquitto:
      name: mosquitto

services:
  cockroachdb:
    image: cockroachdb/cockroach:latest
    container_name: cockroachdb
    restart: unless-stopped
    hostname: cockroachdb
    networks:
      local:
        aliases:
          - cockroachdb
        ipv4_address: 172.163.0.2
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    ports:
      - '26257:26257'
      - '8080:8080'
    command: start-single-node --insecure
    volumes:
      - 'cockroachdb:/cockroach/cockroach-data'
      # - './docker/scripts/sql/keycloak.sql:/docker-entrypoint-initdb.d/keycloak.sql'
    environment:
      COCKROACH_DATABASE: ${COCKROACH_DATABASE:-nodered}
      COCKROACH_USER: ${COCKROACH_USER:-nodered}

  mongodb:
    image: mongo:latest
    container_name: mongodb
    restart: unless-stopped
    hostname: mongodb
    networks:
      local:
        aliases:
          - mongodb
        ipv4_address: 172.163.0.3
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    ports:
      - '27017:27017'
    volumes:
      # - './scripts/nosql:/docker-entrypoint-initdb.d'
      - 'mongodb:/data/db'
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME:-root}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD:-root}

  redis:
    image: redis:alpine
    container_name: redis
    restart: unless-stopped
    hostname: redis
    networks:
      local:
        aliases:
          - redis
        ipv4_address: 172.163.0.4
    extra_hosts:
      - host.docker.internal:host-gateway
    ports:
      - '6379:6379'
    volumes:
      - 'redis:/data'

  localstack:
      image: localstack/localstack
      restart: unless-stopped
      container_name: localstack
      hostname: localstack
      networks:
        local:
          aliases:
            - localstack
          ipv4_address: 172.163.0.5
      extra_hosts:
        - 'host.docker.internal:host-gateway'
      ports:
        - '4572:4572' # s3
        - '4576:4576' # sqs
        - '4566:4566' # cli
      volumes:
        # - './scripts/localstack:/docker-entrypoint-initaws.d'
        - 'localstack:/tmp/localstack/data'
        - '/var/run/docker.sock:/var/run/docker.sock'
      environment:
        SERVICES: ${LOCALSTACK_SERVICES:-s3,sqs}
        DOCKER_HOST: unix:///var/run/docker.sock
        DEBUG: ${LOCALSTACK_DEBUG:-1}
        HOSTNAME_EXTERNAL: localstack

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    restart: unless-stopped
    container_name: zookeeper
    hostname: zookeeper
    networks:
      local:
        aliases:
          - zookeeper
        ipv4_address: 172.163.0.6
    extra_hosts:
      - host.docker.internal:host-gateway
    ports:
      - '2181:2181'
    volumes:
      - 'zookeeper:/var/lib/zookeeper'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    depends_on:
      - zookeeper
    image: confluentinc/cp-kafka:latest
    restart: unless-stopped
    container_name: kafka
    hostname: kafka
    networks:
      local:
        aliases:
          - kafka
        ipv4_address: 172.163.0.7
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    ports:
      - '9092:9092'
    volumes:
      - 'kafka:/var/lib/kafka/data'
    environment:
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID:-1}
      KAFKA_ZOOKEEPER_CONNECT: ${KAFKA_ZOOKEEPER_CONNECT:-zookeeper:2181}
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS:-PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: ${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP:-PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT}
      KAFKA_INTER_BROKER_LISTENER_NAME: ${KAFKA_INTER_BROKER_LISTENER_NAME:-PLAINTEXT}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR:-1}

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: unless-stopped
    hostname: rabbitmq
    networks:
      local:
        aliases:
          - rabbitmq
        ipv4_address: 172.163.0.8
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    ports:
      - '5672:5672'
      - '25672:25672'
      - '15672:15672'
    volumes:
      - 'rabbitmq:/var/lib/rabbitmq'

  nats:
    image: nats:latest
    restart: unless-stopped
    container_name: nats
    hostname: nats
    networks:
      local:
        aliases:
          - nats
        ipv4_address: 172.163.0.9
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    ports:
      - '4222:4222'
      - '6222:6222'
      - '8222:8222'
    volumes:
      - 'nats:/data'

  mosquitto:
    image: eclipse-mosquitto:latest
    container_name: mosquitto
    restart: unless-stopped
    hostname: nats
    networks:
      local:
        aliases:
          - mosquitto
        ipv4_address: 172.163.0.10
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    ports:
      - '1883:1883'
      - '29001:9001'
    volumes:
      - 'mosquitto:/mosquitto'

  # this postgres is for keycloak because it doesn't support cockroachdb dont use it for anything else
  postgres:
    image: postgres:13.2
    restart: unless-stopped
    container_name: postgres
    hostname: postgres
    networks:
      local:
        aliases:
          - postgres
        ipv4_address: 172.163.0.11
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    ports:
      - '5432:5432'
    volumes:
      - 'postgres:/var/lib/postgresql'
    environment:
      POSTGRES_DB: ${POSTGRESQL_DB:-keycloak}
      POSTGRES_USER: ${POSTGRESQL_USER:-keycloak_user}
      POSTGRES_PASSWORD: ${POSTGRESQL_PASS:-keycloak_pass}
      POSTGRES_ROOT_PASSWORD: ${POSTGRESQL_ROOT_PASS:-postgres}

  keycloak:
    depends_on:
      - postgres
    image: macedodosanjosmateus/keycloak-custom:latest
    build:
      context: ./docker/build/keycloak
      dockerfile: Dockerfile
    restart: unless-stopped
    container_name: keycloak
    command: 'start-dev'
    hostname: keycloak
    networks:
      local:
        aliases:
          - keycloak
        ipv4_address: 172.163.0.12
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    ports:
      - '28443:8443'
      - '28080:8080'
      - '29990:9990'
    volumes:
      - 'keycloak:/data'
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_USER:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_PASS:-admin}
      KC_DB: postgres
      KC_DB_URL_HOST: postgres
      KC_DB_URL_PORT: 5432
      KC_DB_SCHEMA: public
      KC_DB_USERNAME: keycloak_user
      KC_DB_PASSWORD: keycloak_pass
      KC_DB_URL_PROPERTIES: '?sslmode=disable'
      KC_HOSTNAME: localhost
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HTTP_ENABLED: true
  # Disable ssl on master realm
  # docker exec -it keycloak /bin/bash
  #  cd /opt/keycloak/bin
  # ./kcadm.sh config credentials --server http://localhost:8080 --realm master --user admin
  # ./kcadm.sh update realms/master -s sslRequired=NONE

  node-red:
    image: docker.io/macedodosanjosmateus/nodered:latest
    restart: unless-stopped
    container_name: node-red
    hostname: node-red
    networks:
      local:
        aliases:
          - node-red
        ipv4_address: 172.163.0.21
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    ports:
      - '1880:1880'
    volumes:
      - './src:/data'
    environment:
      TZ: ${TZ:-UTC}
      FLOW_FILE_PRETTY: ${FLOW_FILE_PRETTY:-false}
      NODE_RED_ENABLE_PROJECTS: ${NODE_RED_ENABLE_PROJECTS:-false}
      NODE_RED_ENABLE_SAFE_MODE: ${NODE_RED_ENABLE_SAFE_MODE:-false}
      NODE_RED_LOG_LEVEL: ${NODE_RED_LOG_LEVEL:-info}
      NODE_RED_ADMIN_ROOT: ${NODE_RED_ADMIN_ROOT:-false}
      NODE_RED_HTTP_NODE_ROOT: ${NODE_RED_HTTP_NODE_ROOT:-/}
      NODE_RED_ENABLE_EXTERNAL_MODULES_AUTO_INSTALL: ${NODE_RED_ENABLE_EXTERNAL_MODULES_AUTO_INSTALL:-false}
      NODE_RED_ENABLE_EXTERNAL_MODULES_PALETTE_INSTALL: ${NODE_RED_ENABLE_EXTERNAL_MODULES_PALETTE_INSTALL:-false}
      NODE_RED_ENABLE_EXTERNAL_MODULES_PALETTE_UPDATE: ${NODE_RED_ENABLE_EXTERNAL_MODULES_PALETTE_UPDATE:-false}
      NODE_RED_ENABLE_EXTERNAL_MODULES_PALETTE_UPLOAD: ${NODE_RED_ENABLE_EXTERNAL_MODULES_PALETTE_UPLOAD:-false}
      NODE_RED_ENABLE_AUDIT: ${NODE_RED_ENABLE_AUDIT:-false}
      NODE_RED_ENABLE_METRICS: ${NODE_RED_ENABLE_METRICS:-false}
      NODE_RED_ENABLE_STATE_UI: ${NODE_RED_ENABLE_STATE_UI:-false}
      NODE_RED_ENABLE_STATE: ${NODE_RED_ENABLE_STATE:-false}
      NODE_RED_ENABLE_DIAGNOSTICS: ${NODE_RED_ENABLE_DIAGNOSTICS:-false}
      NODE_RED_ENABLE_DIAGNOSTICS_UI: ${NODE_RED_ENABLE_DIAGNOSTICS_UI:-false}
      NODE_RED_CREDENTIAL_SECRET: ${NODE_RED_CREDENTIAL_SECRET:-false}